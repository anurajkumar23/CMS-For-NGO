generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  userId      String
  billboards  Billboard[]  @relation("BillboardsToStore")
  campaigns   Campaign[]   @relation("CampaignsToStore")
  donations   Donation[]   @relation("DonationsToStore")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  blogs       Blog[]       @relation("BlogsToStore")
  gallery     Gallery[]    @relation("GalleryToStore")
  users       User[]       @relation("UsersToStore")
  featureBars FeatureBar[] @relation("FeatureBarsToStore")
  aboutUs     AboutUs[]    @relation("AboutUsToStore")
}

model Billboard {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  store     Store    @relation("BillboardsToStore", fields: [storeId], references: [id])
  label1    String?
  label2    String?
  imageUrl  String
  linkUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Campaign {
  id           String     @id @default(uuid()) @map("_id")
  storeId      String // Foreign Key to Store
  store        Store      @relation("CampaignsToStore", fields: [storeId], references: [id])
  campaign     String
  heading      String
  imageUrl     String
  descriptions String?
  goalAmount   String?
  raisedAmount String?
  donations    Donation[] @relation("DonationsToCampaign")
  createdAt    DateTime   @default(now()) @map("createdAt")

  @@index([storeId])
  @@map("Campaigns")
}

model Blog {
  id           String   @id @default(uuid()) @map("_id")
  storeId      String // Foreign Key to Store
  store        Store    @relation("BlogsToStore", fields: [storeId], references: [id])
  imageUrl     String
  heading      String
  descriptions String
  author       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Blog")
}

model Donation {
  id           String          @id @default(uuid()) @map("_id")
  storeId      String // Foreign Key to Store
  store        Store           @relation("DonationsToStore", fields: [storeId], references: [id])
  campaign     Campaign        @relation("DonationsToCampaign", fields: [campaignId], references: [id])
  campaignId   String          @map("campaignsId") // Foreign Key to Campaigns
  amount       Float
  citizenship  CitizenshipEnum
  fullName     String
  email        String
  phoneNumber  String
  governmentId String
  address      String
  pincode      String
  state        String
  city         String
  isPaid       Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([storeId])
}

model Gallery {
  id      String  @id @default(uuid()) @map("_id")
  storeId String // Foreign Key to Store
  store   Store   @relation("GalleryToStore", fields: [storeId], references: [id])
  images  Image[]

  @@map("Gallery")
}

model User {
  id      String @id @default(uuid()) @map("_id")
  storeId String // Foreign Key to Store
  store   Store  @relation("UsersToStore", fields: [storeId], references: [id])
  name    String
  phone   String
  email   String
  address String
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gallery   Gallery? @relation(fields: [galleryId], references: [id])
  galleryId String?

  @@index([galleryId])
}

model FeatureBar {
  id         String  @id @default(uuid()) @map("_id")
  storeId    String // Foreign Key to Store
  store      Store   @relation("FeatureBarsToStore", fields: [storeId], references: [id])
  donors     String?
  lifeSaved  String?
  donated    String?
  volunteers String?
}

enum CitizenshipEnum {
  Indian
  Foreign
}

model AboutUs {
  id            String    @id @default(uuid()) @map("_id")
  storeId       String // Foreign Key to Store
  store         Store     @relation("AboutUsToStore", fields: [storeId], references: [id])
  trustees      Trustee[] @relation("AboutUsToTrustee")
  ourMembersUrl String?
  phoneNo       String?
  address       String?

  @@map("AboutUs")
}

model Trustee {
  id        String  @id @default(uuid()) @map("_id")
  name      String
  post      String
  photoUrl  String?
  aboutUs   AboutUs @relation("AboutUsToTrustee", fields: [aboutUsId], references: [id])
  aboutUsId String  @map("aboutUs") // Foreign Key to AboutUs

  @@map("Trustee")
}
